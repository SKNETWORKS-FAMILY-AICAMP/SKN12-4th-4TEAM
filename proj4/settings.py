"""
Django settings for proj4 project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# .env 파일 로드 (BASE_DIR에 .env 파일이 있다고 가정)
load_dotenv()
# load_dotenv(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-fy7+m_qs8ji$o%-ruqmaw*l7q+9mgsr_tkj0u5*j+3nek03ul+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['34.47.77.200', 'www.google.com','127.0.0.1', 'localhost', 'ballzzi.duckdns.org'] # vm 외부 ip


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',

    ## Django Allauth에 필요한 앱들
    'django.contrib.sites', # Allauth는 Site 프레임워크를 사용합니다.
    'allauth',
    'allauth.account', # 일반적인 계정 관리 (회원가입, 로그인 등)
    'allauth.socialaccount', # 소셜 계정 관리
    'allauth.socialaccount.providers.google',
    ## 'allauth_naver'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # <-- 이 줄을 추가해주세요!
]

ROOT_URLCONF = 'proj4.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'proj4.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# settings.py 파일

import os # 맨 위에 추가

STATIC_URL = '/static/'

# 프로젝트 전체의 정적 파일들을 찾을 디렉토리들을 정의합니다.
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'), # 프로젝트 루트의 static 폴더
    # 만약 앱마다 static 폴더를 만들었다면, Django가 알아서 찾습니다.
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# settings.py

# SITE_ID는 django.contrib.sites 앱이 필요로 합니다.
SITE_ID = 1

# 인증 백엔드 설정 (Allauth가 인증 처리를 오버라이드하도록)
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend', # Django 관리자 페이지 접근용
    'allauth.account.auth_backends.AuthenticationBackend', # Allauth 인증용
)

# 로그인/로그아웃/회원가입 후 리다이렉트 될 URL
LOGIN_REDIRECT_URL = '/' # 로그인 성공 후 리다이렉트 될 URL
ACCOUNT_LOGOUT_REDIRECT_URL = '/' # 로그아웃 후 리다이렉트 될 URL

# Allauth 기타 설정 (필요에 따라 추가/변경)
ACCOUNT_LOGIN_METHODS = {'username', 'email'} # 로그인 시 사용자 이름 또는 이메일 사용
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*'] # 회원가입 필드 설정
ACCOUNT_EMAIL_VERIFICATION = 'none' # 이메일 인증 필수 ('optional' 또는 'none'도 가능)
ACCOUNT_SESSION_REMEMBER = True # 로그인 유지 기능
ACCOUNT_UNIQUE_EMAIL = True # 이메일 중복 허용 안 함

SOCIALACCOUNT_QUERY_EMAIL = True # 소셜 로그인 시 이메일 정보를 요청할지 여부
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.getenv('GOOGLE_CLIENT_ID'), # .env에서 읽어옴
            'secret': os.getenv('GOOGLE_CLIENT_SECRET'), # .env에서 읽어옴
            'key': '' # (선택 사항)
        },
        'SCOPE': ['profile', 'email'], # Google에서 요청할 권한
    },
    'naver': {
        'APP': {
            'client_id': 'YOUR_NAVER_CLIENT_ID',
            'secret': 'YOUR_NAVER_CLIENT_SECRET',
        },
        'SCOPE': ['email', 'profile'],
    },
}

LOGIN_URL = '/accounts/login/' # ✨ 로그인 페이지의 URL

# 네이버 검색 API 설정
import os
NAVER_API = {
    'client_id': os.getenv('NAVER_CLIENT_ID', 'test_client_id'),
    'secret': os.getenv('NAVER_CLIENT_SECRET', 'test_client_secret'),
}

# 환경변수 직접 설정 (개발용)
os.environ.setdefault('NAVER_CLIENT_ID', 'test_client_id')
os.environ.setdefault('NAVER_CLIENT_SECRET', 'test_client_secret')